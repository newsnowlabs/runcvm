#!/bin/bash -e

# Load framework functions
. ../framework.sh

# TEST VARIABLES
NODE=00-http-docker-swarm-node

# Number of nodes
NODES=${NODES:-3}

# Network MTU to deploy in Docker network, RunCVM container VM nodes, and on Docker and swarm ingress network running on those nodes.
MTU=${MTU:-9000}

# Set to "1" to enable installation of https://github.com/newsnowlabs/docker-ingress-routing-daemon on the swarm
DIRD=${DIRD:-0}

# Set to "1" to disable cleanup of Docker image
NO_CLEAN_IMAGE=${NO_CLEAN_IMAGE:-0}

# OVERRIDE FRAMEWORK FUNCTIONS
nodes() { seq 1 $NODES | sed "s/^/$NODE/"; }
volumes() { echo swarm $(nodes); }
networks() { echo runcvm-mtu; }
images() { echo $IMAGE; }

h=$(hostname)

if [ -n "$REGISTRY_MIRROR" ]; then
  log "REGISTRY_MIRROR '$REGISTRY_MIRROR' detected."
else
  log "No REGISTRY_MIRROR detected: recommend setting REGISTRY_MIRROR=http://localhost:5000 and launching:"
  log "- docker run -d --name=registry --network=host -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io registry:2"
fi

log "Build image ..."
docker build --iidfile /tmp/iid -f node/Dockerfile node/
IMAGE=$(cat /tmp/iid)

if [ -n "$MTU" ] && [ "$MTU" -gt 0 ]; then
  log "Creating network 'runcvm-mtu' with MTU $MTU ..."
  docker network create --opt com.docker.network.driver.mtu=$MTU --scope=local runcvm-mtu
else
  log "Creating network 'runcvm-mtu' with default (unspecified) MTU ..."
  docker network create --scope=local runcvm-mtu
fi

log "Launching $NODES x RunCVM nodes with image $IMAGE ..."
for n in $(seq 1 $NODES)
do
  log -n "Launching RunCVM node $n/$NODES ... "

  # Enables Docker's use of overlay2 storage driver in a file-backed disk stored in a dedicated Docker volume
  # diskopt="--mount=type=volume,src=$NODE$n,dst=/disks --env=RUNCVM_DISKS=/disks/disk1,/var/lib/docker,ext4,500M"

  # Docker will fall back to using the vfs storage driver, as it detects /var/lib/docker is an overlay2 fs.
  # diskopt="--mount=type=volume,src=$NODE$n,dst=/var/lib/docker"
  
  # Enables Docker's use of overlay2 storage driver in a file-backed disk stored in the container's overlayfs
  diskopt="--env=RUNCVM_DISKS=/disks/disk1,/var/lib/docker,ext4,500M"

  # The swarm volume, mounted at /swarm within the RunCVM VMs, will be used to share swarm info
  # among the nodes.
  docker run \
    -d \
    --rm \
    --runtime=runcvm \
    --network=runcvm-mtu \
    --publish=$((8080+$n-1)):80 \
    --name=$NODE$n \
    --hostname=$NODE$n \
    --memory=512m \
    --env=NODE=$n \
    --env=NODES=$NODES \
    --env=MTU=$MTU \
    --env=DIRD=$DIRD \
    --env=REGISTRY_MIRROR=$REGISTRY_MIRROR \
    --mount=type=volume,src=swarm,dst=/swarm \
    $diskopt \
    $IMAGE
done

log "Monitoring ${NODE}1 logs for swarm setup progress ..."
docker logs -f ${NODE}1 -n 0 2>&1 | sed "s/^/> (${NODE}1) > /; /Swarm complete/q0; /Swarm failed/q129;"
log "Finished monitoring ${NODE}1 logs as swarm is set up."

log "Creating http service (please be patient) ..."
docker exec ${NODE}1 docker service create \
  -d \
  --name=http --mode=global -p 80:80 --update-parallelism=0 \
  alpine ash -c "$(tr '\012' ' ' <<_EOE_
apk add --no-cache mini_httpd &&
mkdir -p /www &&
echo -e "#!/bin/sh\n\necho Content-Type: text/plain\necho\necho hostname=\$HOSTNAME remote_addr=\\\$REMOTE_ADDR\nexit 0\n" >/www/index.cgi &&
chmod 755 /www/index.cgi &&
mini_httpd -d /www -D -l /dev/stdout -c '**.cgi'
_EOE_
)"

for i in $(seq 1 200 | sort -nr)
do
  replicas=$(docker exec ${NODE}1 docker service ls --format='{{ .Replicas }}' --filter='Name=http')
  log "Waiting for remainder of $replicas replicas to launch (#$i) ..."
  [ "$replicas" = "$NODES/$NODES" ] && break
  [ $i -eq 1 ] && exit 253
  sleep 1
done
log "All $NODES replicas launched."
sleep 1

# Allow final test to complete, even if we encounter errors
set +e

if [ "$DIRD" = "1" ]; then
  DOCKER_IPV4=$(docker network inspect runcvm-mtu --format='{{(index .IPAM.Config 0).Gateway}}')
else
  DOCKER_IPV4="10.0.0."
fi

log "Running $NODE test looking for '$DOCKER_IPV4' at $(date) ..."

ERRORS=0
TESTS=0
for loop in $(seq 1 250)
do
  i=$((loop % NODES))

  host=http://0.0.0.0:$((8080+i))/

  # Uncomment if running inside a Dockside devtainer (which must be preconnected to a precreated runcvm-mtu Docker network).
  # host=http://$NODE$((i+1)):80/

  response=$(curl --max-time 1 -is $host)
  ERROR=$?

  if [ $ERROR -eq 0 ]; then
    response=$(tr '\012\015' '  ' <<<$response)
    grep -q "remote_addr=$DOCKER_IPV4" <<<$response
    [ $? -ne 0 ] && log "#$loop Response error: $response" && ERROR=1
  else
    log "#$loop Response error: curl error $ERROR"
    ERROR=1
  fi

  ERRORS=$((ERRORS+ERROR))
  TESTS=$((TESTS+1))

done

log "Completed $NODE test $TESTS times, with $ERRORS errors"

# Uncomment to debug:
# log "Falling to shell, type CTRL+D to exit and clean up"; bash -i

sleep 1
exit $ERRORS
